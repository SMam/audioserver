# coding: utf-8
require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe AudiogramsController do

  # This should return the minimal set of attributes required to create a valid
  # Audiogram. As you add validations to Audiogram, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {:examdate => Time.now, :audiometer => 'audiometer'}
  end
  
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AudiogramsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  before do
    @patient = FactoryGirl.create(:patient)
    @right_auth = 'Basic ' + Base64::encode64("audioadmin:audioadmin")
    @wrong_auth = 'Basic ' + Base64::encode64("wrong_name:wrong_password")
  end

  describe "GET index" do
    it "assigns all audiograms as @audiograms" do
      audiogram = Audiogram.create! valid_attributes
      @patient.audiograms << audiogram
      get :index, {:patient_id => @patient.to_param}, valid_session
      assigns(:audiograms).should eq([audiogram])
    end
  end

  describe "GET show" do
    it "assigns the requested audiogram as @audiogram" do
      audiogram = Audiogram.create! valid_attributes
      @patient.audiograms << audiogram
      get :show, {:patient_id => @patient.to_param, :id => audiogram.to_param}, valid_session
      assigns(:audiogram).should eq(audiogram)
    end
  end

  describe "GET new" do
    it "assigns a new audiogram as @audiogram" do
      get :new, {:patient_id => @patient.to_param}, valid_session
      assigns(:audiogram).should be_a_new(Audiogram)
    end
  end

  describe "GET edit" do
    context "basic認証に対して username:passwordなしで操作した場合" do
      it "リクエストした audiogramは @audiogramに assignされないこと" do
        audiogram = Audiogram.create! valid_attributes
        @patient.audiograms << audiogram
        get :edit, {:patient_id => @patient.to_param, :id => audiogram.to_param}, valid_session
        assigns(:audiogram).should_not eq(audiogram)
      end
    end

    context "basic認証をpassする場合" do
      it "assigns the requested audiogram as @audiogram" do
        request.env['HTTP_AUTHORIZATION'] = @right_auth
        audiogram = Audiogram.create! valid_attributes
        @patient.audiograms << audiogram
        get :edit, {:patient_id => @patient.to_param, :id => audiogram.to_param}, valid_session
        assigns(:audiogram).should eq(audiogram)
      end
    end

    context "basic認証をpassしない場合" do
      it "リクエストした audiogramは @audiogramに assignされないこと" do
        request.env['HTTP_AUTHORIZATION'] = @wrong_auth
        audiogram = Audiogram.create! valid_attributes
        @patient.audiograms << audiogram
        get :edit, {:patient_id => @patient.to_param, :id => audiogram.to_param}, valid_session
        assigns(:audiogram).should_not eq(audiogram)
      end
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Audiogram" do
        expect {
          post :create, {:patient_id => @patient.to_param, :audiogram => valid_attributes}, valid_session
        }.to change(Audiogram, :count).by(1)
      end

      it "assigns a newly created audiogram as @audiogram" do
        post :create, {:patient_id => @patient.to_param, :audiogram => valid_attributes}, valid_session
        assigns(:audiogram).should be_a(Audiogram)
        assigns(:audiogram).should be_persisted
      end

      it "redirects to the created audiogram" do
        post :create, {:patient_id => @patient.to_param, :audiogram => valid_attributes}, valid_session
        response.should redirect_to([@patient, Audiogram.last])
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved audiogram as @audiogram" do
        # Trigger the behavior that occurs when invalid params are submitted
        Audiogram.any_instance.stub(:save).and_return(false)
        post :create, {:patient_id => @patient.to_param, :audiogram => {}}, valid_session
        assigns(:audiogram).should be_a_new(Audiogram)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Audiogram.any_instance.stub(:save).and_return(false)
        post :create, {:patient_id => @patient.to_param, :audiogram => {}}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested audiogram" do
        audiogram = Audiogram.create! valid_attributes
        @patient.audiograms << audiogram
        # Assuming there are no other audiograms in the database, this
        # specifies that the Audiogram created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Audiogram.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:patient_id => @patient.to_param, :id => audiogram.to_param, \
	              :audiogram => {'these' => 'params'}}, valid_session
      end

      it "assigns the requested audiogram as @audiogram" do
        audiogram = Audiogram.create! valid_attributes
        @patient.audiograms << audiogram
        put :update, {:patient_id => @patient.to_param, :id => audiogram.to_param, \
	              :audiogram => valid_attributes}, valid_session
        assigns(:audiogram).should eq(audiogram)
      end

      it "redirects to the audiogram" do
        audiogram = Audiogram.create! valid_attributes
        @patient.audiograms << audiogram
        put :update, {:patient_id => @patient.to_param, :id => audiogram.to_param, \
	              :audiogram => valid_attributes}, valid_session
        response.should redirect_to([@patient, audiogram])
      end
    end

    describe "with invalid params" do
      it "assigns the audiogram as @audiogram" do
        audiogram = Audiogram.create! valid_attributes
        @patient.audiograms << audiogram
        # Trigger the behavior that occurs when invalid params are submitted
        Audiogram.any_instance.stub(:save).and_return(false)
        put :update, {:patient_id => @patient.to_param, :id => audiogram.to_param, \
	              :audiogram => {}}, valid_session
        assigns(:audiogram).should eq(audiogram)
      end

      it "re-renders the 'edit' template" do
        audiogram = Audiogram.create! valid_attributes
        @patient.audiograms << audiogram
        # Trigger the behavior that occurs when invalid params are submitted
        Audiogram.any_instance.stub(:save).and_return(false)
        put :update, {:patient_id => @patient.to_param, :id => audiogram.to_param, \
	              :audiogram => {}}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    before do
      @audiogram = Audiogram.create! valid_attributes
      @patient.audiograms << @audiogram
    end

    context "basic認証に対して username:passwordなしで操作した場合" do
      it "does not destroy the requested audiogram" do
        expect {
          delete :destroy, {:patient_id => @patient.to_param, :id => @audiogram.to_param},\
            valid_session
        }.to change(Audiogram, :count).by(0)
      end

      it "does not redirect to the audiograms list" do
        delete :destroy, {:patient_id => @patient.to_param, :id => @audiogram.to_param},\
          valid_session
        response.should_not redirect_to(patient_audiograms_url)
      end
    end

    context "basic認証をpassしない場合" do
      before do
        request.env['HTTP_AUTHORIZATION'] = @wrong_auth
      end

      it "does not destroy the requested audiogram" do
        expect {
          delete :destroy, {:patient_id => @patient.to_param, :id => @audiogram.to_param},\
            valid_session
        }.to change(Audiogram, :count).by(0)
      end

      it "does not redirect to the audiograms list" do
        delete :destroy, {:patient_id => @patient.to_param, :id => @audiogram.to_param},\
          valid_session
        response.should_not redirect_to(patient_audiograms_url)
      end
    end

    context "basic認証をpassする場合" do
      before do
        request.env['HTTP_AUTHORIZATION'] = @right_auth
      end

      it "destreys the requested audiogram" do
        expect {
          delete :destroy, {:patient_id => @patient.to_param, :id => @audiogram.to_param},\
            valid_session
        }.to change(Audiogram, :count).by(-1)
      end

      it "redirects to the audiograms list" do
        delete :destroy, {:patient_id => @patient.to_param, :id => @audiogram.to_param},\
          valid_session
#        response.should redirect_to(@audiograms_url)
#        response.should redirect_to([@patient, @audiograms_url])
        response.should redirect_to(patient_audiograms_url)
      end
    end
  end

end
