# coding: utf-8
require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe AudiogramsController do

  # This should return the minimal set of attributes required to create a valid
  # Audiogram. As you add validations to Audiogram, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {:examdate => Time.now, :audiometer => 'audiometer'}
  end
  
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AudiogramsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  before do
    @patient = FactoryGirl.create(:patient)
    @right_auth = 'Basic ' + Base64::encode64("audioadmin:audioadmin")
    @wrong_auth = 'Basic ' + Base64::encode64("wrong_name:wrong_password")
  end

  describe "GET index" do
    it "assigns all audiograms as @audiograms" do
      audiogram = Audiogram.create! valid_attributes
      @patient.audiograms << audiogram
      get :index, {:patient_id => @patient.to_param}, valid_session
      assigns(:audiograms).should eq([audiogram])
    end
  end

  describe "GET show" do
    before do
      @audiogram = Audiogram.create! valid_attributes
      @audiogram.examdate = Time.now
      exam_year = @audiogram.examdate.strftime("%Y")
      base_dir = "#{Rails.env}/graphs/#{exam_year}"
      @audiogram.image_location = "#{base_dir}/#{@audiogram.examdate.strftime("%Y%m%d-%H%M%S")}.png"
      image_root = "app/assets/images"
      image_dir = "#{Rails.root}/#{image_root}/#{Rails.env}/graphs/#{exam_year}" 
      @image_file = "#{Rails.root}/#{image_root}/#{@audiogram.image_location}"
      Dir::mkdir("#{Rails.root}/#{image_root}/#{Rails.env}")\
        if not File.exists?("#{Rails.root}/#{image_root}/#{Rails.env}") 
      Dir::mkdir("#{Rails.root}/#{image_root}/#{Rails.env}/graphs")\
        if not File.exists?("#{Rails.root}/#{image_root}/#{Rails.env}/graphs") 
      Dir::mkdir(image_dir) if not File.exists?(image_dir)
      File::delete(@image_file) if File.exist?(@image_file)
      File::open(@image_file, "w") do |f|
        f.write (@test_str = "test_string")
      end
      @patient.audiograms << @audiogram
    end

    it "assigns the requested audiogram as @audiogram" do
      get :show, {:patient_id => @patient.to_param, :id => @audiogram.to_param}, valid_session
      assigns(:audiogram).should eq(@audiogram)
    end

    it "聴検の画像が保存されている場合、画像が更新されないこと" do
      get :show, {:patient_id => @patient.to_param, :id => @audiogram.to_param}, valid_session
      content = String.new
      File::open(@image_file) do |f|
        content = f.read
      end
      content.should == @test_str
    end

    it "聴検の画像が保存されていない場合、画像を作成すること" do
      @audiogram.image_location = "DummyImageLocation"
      @audiogram.save
      @audiogram.image_location.should == "DummyImageLocation"
      get :show, {:patient_id => @patient.to_param, :id => @audiogram.to_param}, valid_session
      File.exist?(@image_file).should be_true
      @audiogram.reload
      @audiogram.image_location.should_not == "DummyImageLocation"
    end
  end

  describe "GET new" do
    it "assigns a new audiogram as @audiogram" do
      get :new, {:patient_id => @patient.to_param}, valid_session
      assigns(:audiogram).should be_a_new(Audiogram)
    end
  end

  describe "GET edit" do
    context "basic認証に対して username:passwordなしで操作した場合" do
      it "リクエストした audiogramは @audiogramに assignされないこと" do
        audiogram = Audiogram.create! valid_attributes
        @patient.audiograms << audiogram
        get :edit, {:patient_id => @patient.to_param, :id => audiogram.to_param}, valid_session
        assigns(:audiogram).should_not eq(audiogram)
      end
    end

    context "basic認証をpassする場合" do
      it "assigns the requested audiogram as @audiogram" do
        request.env['HTTP_AUTHORIZATION'] = @right_auth
        audiogram = Audiogram.create! valid_attributes
        @patient.audiograms << audiogram
        get :edit, {:patient_id => @patient.to_param, :id => audiogram.to_param}, valid_session
        assigns(:audiogram).should eq(audiogram)
      end
    end

    context "basic認証をpassしない場合" do
      it "リクエストした audiogramは @audiogramに assignされないこと" do
        request.env['HTTP_AUTHORIZATION'] = @wrong_auth
        audiogram = Audiogram.create! valid_attributes
        @patient.audiograms << audiogram
        get :edit, {:patient_id => @patient.to_param, :id => audiogram.to_param}, valid_session
        assigns(:audiogram).should_not eq(audiogram)
      end
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Audiogram" do
        expect {
          post :create, {:patient_id => @patient.to_param, :audiogram => valid_attributes}, valid_session
        }.to change(Audiogram, :count).by(1)
      end

      it "assigns a newly created audiogram as @audiogram" do
        post :create, {:patient_id => @patient.to_param, :audiogram => valid_attributes}, valid_session
        assigns(:audiogram).should be_a(Audiogram)
        assigns(:audiogram).should be_persisted
      end

      it "redirects to the created audiogram" do
        post :create, {:patient_id => @patient.to_param, :audiogram => valid_attributes}, valid_session
        response.should redirect_to([@patient, Audiogram.last])
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved audiogram as @audiogram" do
        # Trigger the behavior that occurs when invalid params are submitted
        Audiogram.any_instance.stub(:save).and_return(false)
        post :create, {:patient_id => @patient.to_param, :audiogram => {}}, valid_session
        assigns(:audiogram).should be_a_new(Audiogram)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Audiogram.any_instance.stub(:save).and_return(false)
        post :create, {:patient_id => @patient.to_param, :audiogram => {}}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested audiogram" do
        audiogram = Audiogram.create! valid_attributes
        @patient.audiograms << audiogram
        # Assuming there are no other audiograms in the database, this
        # specifies that the Audiogram created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Audiogram.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:patient_id => @patient.to_param, :id => audiogram.to_param, \
	              :audiogram => {'these' => 'params'}}, valid_session
      end

      it "assigns the requested audiogram as @audiogram" do
        audiogram = Audiogram.create! valid_attributes
        @patient.audiograms << audiogram
        put :update, {:patient_id => @patient.to_param, :id => audiogram.to_param, \
	              :audiogram => valid_attributes}, valid_session
        assigns(:audiogram).should eq(audiogram)
      end

      it "redirects to the audiogram" do
        audiogram = Audiogram.create! valid_attributes
        @patient.audiograms << audiogram
        put :update, {:patient_id => @patient.to_param, :id => audiogram.to_param, \
	              :audiogram => valid_attributes}, valid_session
        response.should redirect_to([@patient, audiogram])
      end
    end

    describe "with invalid params" do
      it "assigns the audiogram as @audiogram" do
        audiogram = Audiogram.create! valid_attributes
        @patient.audiograms << audiogram
        # Trigger the behavior that occurs when invalid params are submitted
        Audiogram.any_instance.stub(:save).and_return(false)
        put :update, {:patient_id => @patient.to_param, :id => audiogram.to_param, \
	              :audiogram => {}}, valid_session
        assigns(:audiogram).should eq(audiogram)
      end

      it "re-renders the 'edit' template" do
        audiogram = Audiogram.create! valid_attributes
        @patient.audiograms << audiogram
        # Trigger the behavior that occurs when invalid params are submitted
        Audiogram.any_instance.stub(:save).and_return(false)
        put :update, {:patient_id => @patient.to_param, :id => audiogram.to_param, \
	              :audiogram => {}}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    before do
      @audiogram = Audiogram.create! valid_attributes
      @patient.audiograms << @audiogram
    end

    context "basic認証に対して username:passwordなしで操作した場合" do
      it "does not destroy the requested audiogram" do
        expect {
          delete :destroy, {:patient_id => @patient.to_param, :id => @audiogram.to_param},\
            valid_session
        }.to change(Audiogram, :count).by(0)
      end

      it "does not redirect to the audiograms list" do
        delete :destroy, {:patient_id => @patient.to_param, :id => @audiogram.to_param},\
          valid_session
        response.should_not redirect_to(patient_audiograms_url)
      end
    end

    context "basic認証をpassしない場合" do
      before do
        request.env['HTTP_AUTHORIZATION'] = @wrong_auth
      end

      it "does not destroy the requested audiogram" do
        expect {
          delete :destroy, {:patient_id => @patient.to_param, :id => @audiogram.to_param},\
            valid_session
        }.to change(Audiogram, :count).by(0)
      end

      it "does not redirect to the audiograms list" do
        delete :destroy, {:patient_id => @patient.to_param, :id => @audiogram.to_param},\
          valid_session
        response.should_not redirect_to(patient_audiograms_url)
      end
    end

    context "basic認証をpassする場合" do
      before do
        request.env['HTTP_AUTHORIZATION'] = @right_auth
      end

      it "destroys the requested audiogram" do
        expect {
          delete :destroy, {:patient_id => @patient.to_param, :id => @audiogram.to_param},\
            valid_session
        }.to change(Audiogram, :count).by(-1)
      end

      it "redirects to the audiograms list" do
        delete :destroy, {:patient_id => @patient.to_param, :id => @audiogram.to_param},\
          valid_session
#        response.should redirect_to(@audiograms_url)
#        response.should redirect_to([@patient, @audiograms_url])
        response.should redirect_to(patient_audiograms_url)
      end
    end
  end

  describe "POST direct_create" do
    # POST /audiograms/direct_create
    # params は params[:hp_id][:datatype][:examdate][:audiometer][:comment][:data]
    # datatype は今のところ audiogram, impedance, images

    before do
      @valid_hp_id = 19
      @invalid_hp_id = 18
      @examdate = Time.now.strftime("%Y:%m:%d-%H:%M:%S")
      @audiometer = "audiometer"
      @datatype = "audiogram"
      @comment = "comment"
      @raw_audiosample = "7@/          /  080604  //   0   30 ,  10   35 ,  20   40 ,          ,  30   45 ,          ,  40   50 ,          ,  50   55 ,          ,  60   60 ,          , -10   55 ,  -5   55 ,          ,   0   55 ,          ,   5   55 ,          ,  10   55 ,          ,  15   55 ,  4>  4<,  4>  4<,  4>  4<,        ,  4>  4<,        ,  4>  4<,        ,  4>  4<,        ,  4>  4<,        ,  4>  4<,  4>  4<,        ,  4>  4<,        ,  4>  4<,        ,  4>  4<,        ,  4>  4<,/P"
      #  125 250 500  1k  2k  4k  8k
      #R   0  10  20  30  40  50  60
      #L  30  35  40  45  50  55  60
    end

    context "datatypeがない場合" do
      it "HTTP status code 400を返すこと" do
        post :direct_create, {:hp_id => @valid_hp_id, :examdate => @examdate, \
	                      :audiometer => @audiometer, :comment => @comment, :data => @raw_audiosample}
        response.status.should  be(400)
      end
    end

    context "datatypeがaudiogramの場合" do
      it "正しいパラメータの場合、Audiogramのアイテム数が1増えること" do
        expect {
          post :direct_create, {:hp_id => @valid_hp_id, :examdate => @examdate, \
                                :audiometer => @audiometer, :datatype => @datatype, \
                                :comment => @comment, :data => @raw_audiosample}
        }.to change(Audiogram, :count).by(1)
      end

      it "正しいパラメータの場合、maskingのデータが取得されること" do
        post :direct_create, {:hp_id => @valid_hp_id, :examdate => @examdate, \
                              :audiometer => @audiometer, :datatype => @datatype, \
                              :comment => @comment, :data => @raw_audiosample}
        assigns(:audiogram).mask_ac_rt_125.should_not be_nil
      end

      it "正しいパラメータの場合、HTTP status code 204を返すこと" do
        post :direct_create, {:hp_id => @valid_hp_id, :examdate => @examdate, \
                              :audiometer => @audiometer, :datatype => @datatype, \
                              :comment => @comment, :data => @raw_audiosample}
        response.status.should  be(204)
      end

      it "正しいパラメータの場合、所定の位置にグラフとサムネイルが作られること" do
        post :direct_create, {:hp_id => @valid_hp_id, :examdate => @examdate, \
                              :audiometer => @audiometer, :datatype => @datatype, \
                              :comment => @comment, :data => @raw_audiosample}
        img_loc = "app/assets/images/#{assigns(:audiogram).image_location}"
        thumb_loc = img_loc.sub("graphs", "thumbnails")
        File::exists?(img_loc).should be_true
        File::exists?(thumb_loc).should be_true
        # assigns(:audiogram)を有効にするには、controller側でインスタンス変数@audiogramが
        # 作成したAudiogramを示すことが必要
      end

      it "不正なhp_idの場合、HTTP status code 400を返すこと" do
        post :direct_create, {:hp_id => @invalid_hp_id, :examdate => @examdate, \
                              :audiometer => @audiometer, :datatype => @datatype, \
                              :comment => @comment, :data => @raw_audiosample}
        response.status.should  be(400)
      end

      it "audiometerの入力がない場合、HTTP status code 400を返すこと" do
        post :direct_create, {:hp_id => @valid_hp_id, :examdate => @examdate, \
                              :datatype => @datatype, \
                              :comment => @comment, :data => @raw_audiosample}
        response.status.should  be(400)
      end

      it "dataがない場合、HTTP status code 400を返すこと" do
        post :direct_create, {:hp_id => @valid_hp_id, :examdate => @examdate, \
                              :audiometer => @audiometer, :datatype => @datatype, \
                              :comment => @comment}
        response.status.should  be(400)
      end

      it "data形式が不正の場合、HTTP status code 400を返すこと" do
        post :direct_create, {:hp_id => @valid_hp_id, :examdate => @examdate, \
                              :audiometer => @audiometer, :datatype => @datatype, \
                              :comment => @comment, :data => "no valid data"}
        response.status.should  be(400)
      end

      it "hp_idが存在しないものの場合、新たにPatientのインスタンスを作る(Patientのアイテム数が1増える)こと" do
        if patient_to_delete = Patient.find_by_hp_id(@valid_hp_id)
          patient_to_delete.destroy
        end
        expect {
          post :direct_create, {:hp_id => @valid_hp_id, :examdate => @examdate, \
                                :audiometer => @audiometer, :datatype => @datatype, \
                                :comment => @comment, :data => @raw_audiosample}
        }.to change(Patient, :count).by(1)
      end

      it "hp_idが存在しないものの場合、(新たにPatientを作成し) Audiogramのアイテム数が1増えること" do
        if patient_to_delete = Patient.find_by_hp_id(@valid_hp_id)
          patient_to_delete.destroy
        end
        expect {
          post :direct_create, {:hp_id => @valid_hp_id, :examdate => @examdate, \
                                :audiometer => @audiometer, :datatype => @datatype, \
                                :comment => @comment, :data => @raw_audiosample}
        }.to change(Audiogram, :count).by(1)
      end

      context "comment内容による @patient.audiogram.commentの変化について" do
        before do
          @patient.hp_id = valid_id?(@patient.hp_id)
	  @patient.save
	end

        def direct_create_with_comment(com)
          post :direct_create, {:hp_id => @patient.hp_id, :examdate => @examdate, \
                                :audiometer => @audiometer, :datatype => @datatype, \
                                :comment => com, :data => @raw_audiosample}
          @patient.reload
        end

        it "1つのcommentがある場合、それに応じたコメントが記録されること" do
          direct_create_with_comment("RETRY_")
          @patient.audiograms.last.comment.should =~ /再検査\(RETRY\)/
          direct_create_with_comment("MASK_")
          @patient.audiograms.last.comment.should match(/マスキング変更\(MASK\)/)
          direct_create_with_comment("PATCH_")
          @patient.audiograms.last.comment.should match(/パッチテスト\(PATCH\)/)
          direct_create_with_comment("MED_")
          @patient.audiograms.last.comment.should match(/薬剤投与後\(MED\)/)
          direct_create_with_comment("OTHER:幾つかのコメント_")
          @patient.audiograms.last.comment.should match(/^・幾つかのコメント/)
        end

        it "2つのcommentがある場合、それに応じたコメントが記録されること" do
          direct_create_with_comment("RETRY_MASK_")
          @patient.audiograms.last.comment.should =~ /再検査\(RETRY\)/
          @patient.audiograms.last.comment.should match(/マスキング変更\(MASK\)/)
          direct_create_with_comment("MED_OTHER:幾つかのコメント_")
          @patient.audiograms.last.comment.should match(/薬剤投与後\(MED\)/)
          @patient.audiograms.last.comment.should match(/^・幾つかのコメント/)
        end
      end

      it "examdateが設定されていない場合..." do
        pending "どうしたものかまだ思案中"
      end

    end
  end

  describe "PUT edit_comment" do # /patients/:patient_id/audiograms/:id/edit_comment
    before do
      @old_comment = "Old comment"
      @new_comment = "New comment"
      audiogram = Audiogram.create! valid_attributes
      audiogram.comment = @old_comment
      audiogram.save
      @patient.audiograms << audiogram
      @audiogram = @patient.audiograms.first
    end

    it "commentを更新できること" do
      @patient.audiograms.length.should == 1
      @audiogram.comment.should == @old_comment
      put :edit_comment, {:patient_id => @patient.to_param, :id => @audiogram.to_param, \
	                  :comment => @new_comment}, valid_session
      @audiogram.reload.comment.should == @new_comment
    end

    it "redirects to show the audiogram" do
      put :edit_comment, {:patient_id => @patient.to_param, :id => @audiogram.to_param, \
	                  :comment => @new_comment}, valid_session
      response.should redirect_to(patient_audiogram_url)
    end
  end
end
