# coding:utf-8
require './impedance_class'

terminate_code = 0x0d.chr + 0x0a.chr + 0x03.chr
tympano_sample = ["5J//  121031  /4030100R        RS22/1805,0327,-004,1795,1792,1777,1790,1797,1775,1775,1770,1770,1775,1777,1780,1780,1782,1780,1780,1782,1780,1780,1780,1777,1780,1780,1777,1780,1780,1780,1785,1782,1782,1785,1787,1787,1792,1792,1792,1792,1795,1795,1795,1795,1795,1795,1795,1795,1795,1792,1790,1787,1785,1785,1782,1782,1785,1787,1790,1790,1792,1797,1800,1805,1810,1812,1817,1825,1830,1832,1832,1835,1835,1837,1837,1837,1837,1840,1837,1835,1832,1830,1830,1830,1832,1830,1830,1832,1830,1830,1827,1827,1827,1827,1835,1832,1832,1837,1845,1850,1852,1857,1860,1862,1862,1870,1870,1870,1872,1875,1877,1880,1877,1880,1880,1880,1882,1882,1885,1887,1890,1892,1892,1892,1897,1900,1902,1905,1907,1907,1907,1907,1910,1912,1912,1915,1917,1920,1917,1917,1917,1920,1920,1920,1920,1922,1927,1927,1927,1935,1937,1945,1947,1950,1955,1957,1962,1965,1967,1967,1975,1977,1985,1995,2002,2007,2015,2017,2020,2022,2017,2015,2012,2010,2005,2005,2005,2005,2007,2010,2012,2017,2020,2022,2030,2037,2040,2045,2055,2055,2057,2062,2067,2075,2077,2080,2080,2082,2085,2090,2095,2100,2112,2120,2125,2127,2130,2132,2132,2130,2130,2130,2130,2130,2130,2125,2122,2120,2117,2115,2115,2115,2107,2105,2105,2100,2095,2087,2082,2082,2075,2070,2055,2050,2045,2037,2030,2027,2027,2030,2032,2032,2032,2035,2032,2030,2030,2027,2025,2025,2022,2020,2017,2017,2015,2012,2010,2002,1997,1987,1992,1980,1977,1972,1970,1975,1977,1982,1980,1972,1965,1955,1947,1937,1940,1935,1932,1930,1927,1922,1920,1920,1917,1912,1910,1907,1900,1897,1897,1895,1890,1887,1882,1882,1880,1880,1880,1877,1872,1870,1870,1865,1867,1865,1865,1865,1865,1865,1867,1865,1862,1860,1855,1852,1857,1847,1845,1840,1837,1835,1830,1830,1830,1827,1827,1827,1827,1827,1830,1832,1835,1837,1842,1845,1847,1850,1845,1845,1842,1840,1837,1835,1832,1830,1827,1825,1822,1820,1812,1805,1795,1790,1785,1780,1777,1777,1780,1775,1777,1777,1777,1775,1775,1772,1772,1772,1777,1772,1780,1777,1780,1780,1780,1780,1780,1777,1772,1767,1762,1762,1762,1762,1767,1775,1775,1775,1780,1782,1780,1777,1775,1780,1787,1800,1802,1797,1795,1787,1772,1765,1757,1755,1742,/" + 13.chr + terminate_code, 
"5J//  121031  /4030100L        RS22/1912,0295,+000,1912,1910,1910,1910,1912,1912,1912,1915,1912,1915,1917,1917,1915,1915,1917,1912,1917,1920,1920,1922,1922,1925,1925,1925,1927,1932,1937,1940,1945,1945,1945,1945,1947,1947,1947,1945,1942,1940,1940,1940,1942,1942,1942,1942,1942,1945,1942,1942,1945,1942,1942,1942,1947,1947,1947,1950,1947,1940,1945,1937,1937,1937,1935,1932,1932,1935,1940,1942,1945,1947,1950,1955,1957,1962,1965,1965,1970,1970,1970,1972,1972,1975,1975,1977,1982,1990,1987,1992,1990,1990,1992,1987,1985,1985,1977,1977,1977,1977,1980,1982,1987,1990,1995,1997,2000,2002,2005,2005,2005,2007,2007,2010,2015,2017,2020,2022,2027,2032,2035,2037,2037,2035,2032,2025,2025,2025,2022,2022,2022,2020,2020,2020,2022,2025,2027,2037,2037,2037,2040,2047,2047,2050,2055,2057,2062,2062,2065,2065,2065,2067,2070,2067,2070,2072,2075,2080,2077,2075,2075,2075,2075,2075,2080,2082,2085,2087,2092,2097,2102,2102,2105,2107,2110,2115,2120,2127,2135,2145,2155,2160,2157,2157,2155,2157,2160,2165,2170,2172,2175,2177,2180,2180,2182,2185,2192,2195,2197,2200,2202,2205,2207,2205,2205,2207,2205,2202,2205,2202,2202,2205,2207,2207,2205,2205,2202,2197,2195,2190,2187,2185,2180,2177,2175,2175,2172,2172,2170,2165,2167,2162,2162,2160,2160,2160,2160,2160,2152,2147,2145,2142,2140,2137,2132,2132,2132,2132,2130,2127,2127,2127,2125,2125,2120,2115,2105,2100,2092,2090,2090,2085,2085,2082,2080,2072,2072,2072,2072,2072,2075,2075,2075,2070,2067,2065,2062,2060,2060,2060,2057,2055,2055,2052,2050,2047,2045,2042,2045,2045,2045,2045,2047,2040,2035,2032,2030,2027,2027,2020,2017,2017,2017,2017,2015,2015,2015,2017,2015,2015,2015,2015,2010,2005,2000,1995,1995,1995,1995,1995,1997,1997,1997,2000,1992,1992,1995,1990,1990,1990,1990,1987,1985,1982,1977,1977,1980,1985,1985,1985,1987,1987,1985,1985,1990,1995,1997,1997,1995,1992,1987,1985,1982,1982,1982,1985,1985,1980,1977,1975,1972,1972,1975,1965,1962,1962,1960,1962,1965,1962,1967,1970,1970,1970,1967,1965,1965,1965,1960,1960,1955,1952,1950,1947,1947,1950,1952,1950,1950,1950,1950,1950,1952,1952,1955,1952,1947,1947,1950,1950,1957,1960,/" + 23.chr + terminate_code]

describe Impedance do
  before :each do
    @tympano_bg_file = "./assets/background_tympanogram.png"
    @reflex_bg_file = "./assets/background_reflexgram.png"
    @output_file = "./output.png"

    File::delete(@output_file) if File::exists?(@output_file)
  end

  context 'tympanometryの場合' do
    before do
      @tympano_data = tympano_sample
    end

    context 'tympanogramの背景画像(background_tympanogram.png)がない場合' do
      it '新しく背景画像を作ること' do
        File::delete(@tympano_bg_file) if File::exists?(@tympano_bg_file)
        i = Impedance.new(ImpedanceData.new(@tympano_data))
        File::exists?(@tympano_bg_file).should be_true
      end
    end

    context 'Impedanceを正しいdataで作成した場合' do
      before do
        @i = Impedance.new(ImpedanceData.new(@tympano_data))
        @i.draw(@output_file)
	@delta = 0.0001
      end

      it 'ファイル出力されること' do
        File::exists?(@output_file).should be_true
      end

      it 'pvt (physical volume test) の出力が正しいこと' do
        @i.pvt[:rt].should be_within(@delta).of(1.805)
        @i.pvt[:lt].should be_within(@delta).of(1.912)
      end

      it 'sc (static compliance) の出力が正しいこと' do
        @i.sc[:rt].should be_within(@delta).of(0.327)
        @i.sc[:lt].should be_within(@delta).of(0.295)
      end

      it 'peakの出力が正しいこと' do
        @i.peak[:rt].should be_within(@delta).of(-4)
        @i.peak[:lt].should be_within(@delta).of(0)
      end

      it '出力は background_tympanogram.pngと異なったサイズであること' do
        File::stat(@output_file).size.should_not == File::stat(@tympano_bg_file).size
      end

      it 'dumpしたpngが出力と一致すること' do
	require 'digest/md5'
        @file_from_dump = './dump.png'
	File::delete(@file_from_dump) if File::exists?(@file_from_dump)
	p = ChunkyPNG::Image.from_datastream(@i.dump_png)
	p.save(@file_from_dump, :fast_rgba)
        Digest::MD5.hexdigest(File.open(@output_file, 'rb').read).should ==\
          Digest::MD5.hexdigest(File.open(@file_from_dump, 'rb').read)
      end
    end

  end
end
